#include <iostream>
using namespace std;

struct Node{
    int key;
    struct Node* left;
    struct Node* right;
};
Node* newNode(int item){
    Node* temp=new Node;
    temp->key=item;
    temp->left=NULL;
    temp->right=NULL;
    return temp;
}
void inorder(Node* root){
    if(root!=NULL){
        inorder(root->left);
        cout<<root->key<<endl;
        inorder(root->right);
    }
}
Node* insert(Node* root,int key){
    if(root==NULL)
        return newNode(key);
    if(key<root->key)
        root->left=insert(root->left,key);
    else if(key>root->key)
        root->right=insert(root->right,key);
    return root;
}
Node* deleteNode(Node* root,int k){
    if(root==NULL)
        return root;
    if(root->key>k){
        root->left=deleteNode(root->left,k);
        return root;
    }
    else if(root->key<k){
        root->right=deleteNode(root->right,k);
        return root;
    }
    
    // We reach here 
    // When one child is empty
    if(root->left==NULL){
        Node* temp=root->right;
        delete root;
        return temp;
    }
    else if(root->right==NULL){
        Node* temp=root->left;
        delete root;
        return temp;
    }
    // When two children are there
    else{
        Node* succparent=root;
        Node* succ=root->right;
        while(succ->left!=NULL){
            succparent=succ;
            succ=succ->left;
        }
        if(succparent!=root)
            succparent->left=succ->right;
        else
            succparent->right=succ->left;
        root->key=succ->key;
        delete succ;
        return root;
    }
}
int main(){
    Node* root=NULL;
    root=insert(root,50);
    root=insert(root,30);
    root=insert(root,20);
    root=insert(root,40);
    root=insert(root,70);
    root=insert(root,60);
    cout<<"Original BST: "<<endl;
    inorder(root);
    
    cout<<"Delete a leaf node: 20"<<endl;
    root=deleteNode(root,20);
    
    cout<<"Modified BST tree after deleting Leaf Node: "<<endl;
    inorder(root);
    
    cout<<"Delete Node with single child: 70"<<endl;
    root=deleteNode(root,70);
    
    cout<<"Modified BST tree after deleting single child Node: "<<endl;
    inorder(root);
    
    cout<<"Delete Node with both child: 50"<<endl;
    root=deleteNode(root,50);
    
    cout<<"Modified BST tree after deleting both child Node: "<<endl;
    inorder(root);
    return 0;
}
